name: Build Plus

on:
  workflow_call:
    inputs:
      platforms:
        required: true
        type: string
      image:
        required: true
        type: string
      target:
        required: true
        type: string
      nap_modules:
        required: false
        type: string
      release-url:
        required: false
        type: string

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: read # for docker/build-push-action to read repo content
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      id-token: write # for OIDC login to AWS
    runs-on: ${{ github.event_name == 'pull_request' && 'ubuntu-22.04' || 'kic-plus' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Fetch Cached Artifacts
        uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0
        with:
          platforms: arm64,s390x
        if: github.event_name != 'pull_request'

      - name: Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@67e9c72af6e0492df856527b474995862b7b6591 # v2.0.0
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.GCR_WORKLOAD_IDENTITY }}
          service_account: ${{ secrets.GCR_SERVICE_ACCOUNT }}
        if: github.event_name != 'pull_request'

      - name: Login to GCR
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
        if: github.event_name != 'pull_request'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_MARKETPLACE }}
        if: github.ref_type == 'tag' && contains(inputs.target, 'aws')

      - name: Login to ECR
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: 709825985650.dkr.ecr.us-east-1.amazonaws.com
        if: github.ref_type == 'tag' && contains(inputs.target, 'aws')

      - name: Get Id Token
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: idtoken
        with:
          script: |
            let id_token = await core.getIDToken()
            core.setOutput('id_token', id_token)

      - name: Login to NGINX Registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: docker-mgmt.nginx.com
          username: ${{ steps.idtoken.outputs.id_token }}
          password: ${{ github.actor }}
        if: ${{ github.event_name != 'pull_request' && ! startsWith(github.ref, 'refs/heads/release-') }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@31cebacef4805868f9ce9a0cb03ee36c32df2ac4 # v5.3.0
        with:
          images: |
            name=gcr.io/f5-gcs-7899-ptg-ingrss-ctlr/dev/nginx-ic${{ contains(inputs.nap_modules, 'dos') && '-dos' || '' }}${{ contains(inputs.nap_modules, 'waf') && '-nap' || '' }}/nginx-plus-ingress
            name=docker-mgmt.nginx.com/nginx-ic${{ contains(inputs.nap_modules, 'dos') && '-dos' || '' }}${{ contains(inputs.nap_modules, 'waf') && '-nap' || '' }}/nginx-plus-ingress,enable=${{ github.ref_type != 'pull_request' && ! startsWith(github.ref, 'refs/heads/release-') }}
            name=709825985650.dkr.ecr.us-east-1.amazonaws.com/nginx/nginx-plus-ingress${{ contains(inputs.nap_modules, 'dos') && '-dos' || '' }}${{ contains(inputs.nap_modules, 'waf') && '-nap' || '' }},enable=${{ github.ref_type == 'tag' && contains(inputs.target, 'aws') }}
          flavor: |
            suffix=${{ contains(inputs.image, 'ubi') && '-ubi' || '' }}${{ contains(inputs.image, 'alpine') && '-alpine' || '' }}${{ contains(inputs.target, 'aws') && '-mktpl' || '' }}${{ contains(inputs.image, 'fips') && '-fips' || ''}},onlatest=true
            latest=${{ contains(inputs.target, 'aws') && 'false' || 'auto' }}
          tags: |
            type=edge
            type=ref,event=pr
            type=ref,event=branch,enable=${{ startsWith(github.ref, 'refs/heads/release-') }}
            type=schedule
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          labels: |
            org.opencontainers.image.description=NGINX Plus Ingress Controller for Kubernetes
            org.opencontainers.image.documentation=https://docs.nginx.com/nginx-ingress-controller
            org.opencontainers.image.vendor=NGINX Inc <kubernetes@nginx.com>

      - name: NAP modules
        id: nap_modules
        run: |
          [[ "${{ inputs.nap_modules }}" == "waf,dos" ]] && modules="both" || modules="${{ inputs.nap_modules }}"
          echo "modules=${modules}" >> $GITHUB_OUTPUT
        if: ${{ inputs.nap_modules != '' }}

      - name: Build Plus Docker image
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          file: build/Dockerfile
          context: "."
          cache-from: type=gha,scope=${{ inputs.image }}${{ contains(inputs.nap_modules, 'dos') && '-dos' || '' }}${{ contains(inputs.nap_modules, 'waf') && '-nap' || '' }}
          cache-to: type=gha,scope=${{ inputs.image }}${{ contains(inputs.nap_modules, 'dos') && '-dos' || '' }}${{ contains(inputs.nap_modules, 'waf') && '-nap' || '' }},mode=max
          target: ${{ inputs.target }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ github.event_name != 'pull_request' && inputs.platforms || '' }}
          load: ${{ github.event_name == 'pull_request' }}
          push: ${{ github.event_name != 'pull_request' }}
          pull: true
          no-cache: ${{ github.event_name != 'pull_request' }}
          sbom: ${{ github.event_name != 'pull_request' }}
          provenance: false
          build-args: |
            BUILD_OS=${{ inputs.image }}
            IC_VERSION=${{ github.ref_type == 'tag' && steps.meta.outputs.version || 'CI' }}
            ${{ inputs.nap_modules != '' && format('NAP_MODULES={0}', inputs.nap_modules) || '' }}
            ${{ steps.nap_modules.outputs.modules != '' && format('NAP_MODULES_AWS={0}', steps.nap_modules.outputs.modules) || '' }}
          secrets: |
            "nginx-repo.crt=${{ inputs.nap_modules != '' && secrets.NGINX_AP_CRT || secrets.NGINX_CRT }}"
            "nginx-repo.key=${{ inputs.nap_modules != '' && secrets.NGINX_AP_KEY || secrets.NGINX_KEY }}"
            ${{ inputs.nap_modules != '' && contains(inputs.image, 'ubi') && format('"rhel_license={0}"', secrets.RHEL_LICENSE) || '' }}

      - name: AWS variables
        id: aws
        run: |
          aws_registry=$(echo "${{ steps.meta.outputs.tags }}" | grep -oP "709825985650.dkr.ecr.us-east-1.amazonaws.com/[^[:space:]]+")
          version=$(echo ${{ steps.meta.outputs.version }} | sed 's/-mktpl//')
          declare -A nap_mapping=(
              ["waf"]=_NAP_WAF
              ["dos"]=_NAP_DOS
              ["waf,dos"]=_NAP_WAF_DOS
          )
          modules=${{ inputs.nap_modules }}
          [[ -n $modules && ${nap_mapping[$modules]+_} ]] && nap=${nap_mapping[$modules]}

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "product_code=AWS${nap}_PRODUCT_ID" >> $GITHUB_OUTPUT
          echo "registry=${aws_registry}" >> $GITHUB_OUTPUT
        if: github.ref_type == 'tag' && contains(inputs.target, 'aws')

      - name: Publish to AWS Marketplace
        uses: nginxinc/aws-marketplace-publish@3f47c25274f67a3d3b087ce9c0786679af316be6 # v1.0.1
        continue-on-error: true
        with:
          version: ${{ steps.aws.outputs.version }}
          product-id: ${{ secrets[steps.aws.outputs.product_code] }}
          registry: ${{ steps.aws.outputs.registry }}
          release-notes: ${{ inputs.release-url }}
          description: |
            Best-in-class traffic management solution for services in Amazon EKS.
            This is the official implementation of NGINX Ingress Controller (based on NGINX Plus) from NGINX.
          usage-instructions: |
            This container requires Kubernetes and can be deployed to EKS.
            Review the installation instructions https://docs.nginx.com/nginx-ingress-controller/installation/ and utilize the deployment resources available https://github.com/nginxinc/kubernetes-ingress/tree/master/deployments
            Use this image instead of building your own.
        if: ${{ github.ref_type == 'tag' && contains(inputs.target, 'aws') }}

      - name: Load image for Trivy
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          file: build/Dockerfile
          context: "."
          cache-from: type=gha,scope=${{ inputs.image }}
          target: ${{ inputs.target }}
          tags: docker.io/${{ inputs.image }}:${{ steps.meta.outputs.version }}
          load: true
          build-args: |
            BUILD_OS=${{ inputs.image }}
            IC_VERSION=${{ github.ref_type == 'tag' && steps.meta.outputs.version || 'CI' }}
            ${{ inputs.nap_modules != '' && format('NAP_MODULES={0}', inputs.nap_modules) || '' }}
            ${{ steps.nap_modules.outputs.modules != '' && format('NAP_MODULES_AWS={0}', steps.nap_modules.outputs.modules) || '' }}
          secrets: |
            "nginx-repo.crt=${{ inputs.nap_modules != '' && secrets.NGINX_AP_CRT || secrets.NGINX_CRT }}"
            "nginx-repo.key=${{ inputs.nap_modules != '' && secrets.NGINX_AP_KEY || secrets.NGINX_KEY }}"
            ${{ inputs.nap_modules != '' && contains(inputs.image, 'ubi') && format('"rhel_license={0}"', secrets.RHEL_LICENSE) || '' }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@91713af97dc80187565512baba96e4364e983601 # 0.16.0
        continue-on-error: true
        with:
          image-ref: docker.io/${{ inputs.image }}:${{ steps.meta.outputs.version }}
          format: "sarif"
          output: "trivy-results-${{ inputs.image }}.sarif"
          ignore-unfixed: "true"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@b374143c1149a9115d881581d29b8390bbcbb59c # v3.22.11
        continue-on-error: true
        with:
          sarif_file: "trivy-results-${{ inputs.image }}.sarif"

      - name: Upload Scan Results
        uses: actions/upload-artifact@c7d193f32edcb7bfad88892161225aeda64e9392 # v4.0.0
        continue-on-error: true
        with:
          name: "trivy-results-${{ inputs.image }}.sarif"
          path: "trivy-results-${{ inputs.image }}.sarif"
        if: always()
